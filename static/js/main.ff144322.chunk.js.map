{"version":3,"sources":["data/resume.pdf","assets/Photo.jpg","assets/Hack-112.jpg","assets/Headshot.png","assets/momentsCrop.png","assets/nextUpLogo.png","assets/Apple.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","bgImage","BGphoto","strength","style","height","href","Resume","class","src","Headshot","alt","Hack112","MomentsLogo","NextUpLogo","Calorimager","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,oC,kBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,uRC+H5BC,MApHf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,WAAD,CAAUC,QAASC,IAASC,SAAU,KACpC,yBAAKH,UAAU,iBACb,yBAAKI,MAAO,CAAEC,OAAQ,MACpB,wBAAIL,UAAU,aAAd,eACc,6BADd,2BAE0B,6BAF1B,kCAIA,yBAAKA,UAAU,mBACb,uBAAGM,KAAMC,KACP,yBAAKC,MAAM,gBAAX,eAMV,kBAAC,WAAD,CAAUL,SAAU,GAClB,yBAAKH,UAAU,kBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,qBACb,yBAAKS,IAAKC,IAAUV,UAAU,WAAWW,IAAI,cAE/C,yBAAKX,UAAU,kBACb,wBAAIA,UAAU,eAAd,YACA,wBAAIA,UAAU,eAAd,oCAEE,6BACA,6BAHF,8SAQ6D,IAC3D,uBAAGM,KAAMC,KAAT,UATF,IAS+B,IAC7B,uBAAGD,KAAK,sDAAR,YAVF,SAaQ,uBAAGA,KAAK,iCAAR,WAbR,uDAeE,6BACA,6BAhBF,+QA2BR,kBAAC,WAAD,CAAUL,QAASW,IAAST,SAAU,KACpC,yBAAKH,UAAU,mBAEjB,kBAAC,WAAD,CAAUG,SAAU,KAClB,yBAAKH,UAAU,gBACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,sBAAd,YAEA,yBAAKA,UAAU,wBACb,yBACES,IAAKI,IACLb,UAAU,cACVW,IAAI,gBAEN,yBAAKX,UAAU,uBACb,wBAAIA,UAAU,oBAAd,WACA,wBAAIA,UAAU,mBAAd,+OASJ,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,oBAAd,WACA,wBAAIA,UAAU,mBAAd,2LAOF,yBAAKS,IAAKK,IAAYd,UAAU,cAAcW,IAAI,gBAGpD,yBAAKX,UAAU,wBACb,yBACES,IAAKM,IACLf,UAAU,cACVW,IAAI,oBAEN,yBAAKX,UAAU,uBACb,wBAAIA,UAAU,oBAAd,eACA,wBAAIA,UAAU,mBAAd,6TClGIgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff144322.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/resume.9389b410.pdf\";","module.exports = __webpack_public_path__ + \"static/media/Photo.290fe192.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Hack-112.18408ba0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Headshot.e9d5d157.png\";","module.exports = __webpack_public_path__ + \"static/media/momentsCrop.a305679d.png\";","module.exports = __webpack_public_path__ + \"static/media/nextUpLogo.7acf1881.png\";","module.exports = __webpack_public_path__ + \"static/media/Apple.198057eb.png\";","import React from \"react\";\nimport { Parallax } from \"react-parallax\";\nimport BGphoto from \"./assets/Photo.jpg\";\nimport Hack112 from \"./assets/Hack-112.jpg\";\nimport Headshot from \"./assets/Headshot.png\";\nimport MomentsLogo from \"./assets/momentsCrop.png\";\nimport NextUpLogo from \"./assets/nextUpLogo.png\";\nimport Calorimager from \"./assets/Apple.png\";\nimport Resume from \"./data/resume.pdf\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Parallax bgImage={BGphoto} strength={600}>\n        <div className=\"firstParallax\">\n          <div style={{ height: 500 }}>\n            <h1 className=\"titleText\">\n              Sean Prendi <br />\n              Discrete Math and Logic <br /> Carnegie Mellon Class of 2022\n            </h1>\n            <div className=\"buttonContainer\">\n              <a href={Resume}>\n                <div class=\"ghost-button\">Resume</div>\n              </a>\n            </div>\n          </div>\n        </div>\n      </Parallax>\n      <Parallax strength={0}>\n        <div className=\"secondParallax\">\n          <div className=\"aboutMeContainer\">\n            <div className=\"headshotContainer\">\n              <img src={Headshot} className=\"headshot\" alt=\"headshot\" />\n            </div>\n            <div className=\"aboutMeContent\">\n              <h1 className=\"aboutMeText\">About Me</h1>\n              <h2 className=\"aboutMeBody\">\n                Hi there! My name is Sean Prendi.\n                <br />\n                <br />\n                I'm sophomore at Carnegie Mellon studying mathematics looking to\n                explore the intersection of math, software engineering, and\n                computer systems. I'm interested in set theory and the\n                foundations of math, systems level software engineering, and\n                machine learning and its applications. You can checkout my{\" \"}\n                <a href={Resume}>resume</a>,{\" \"}\n                <a href=\"https://www.linkedin.com/in/sean-prendi-904943162/\">\n                  LinkedIn\n                </a>\n                , and <a href=\"https://github.com/SeanPrendi\"> Github</a> to\n                learn more about my experience and achievements.\n                <br />\n                <br />\n                Outside the classroom, I love to learn and explore. Some of my\n                hobbies include rock climbing, hiking, caving, and playing\n                ultimate frisbee. I'm always looking for new experiences, from\n                new programming projects to explore, to new ways to get outside\n                and be active.\n              </h2>\n            </div>\n          </div>\n        </div>\n      </Parallax>\n      <Parallax bgImage={Hack112} strength={600}>\n        <div className=\"parallaxThree\"></div>\n      </Parallax>\n      <Parallax strength={200}>\n        <div className=\"parallaxFour\">\n          <div className=\"projectsContainer\">\n            <h1 className=\"projectsHeaderText\">Projects</h1>\n            {/* Moments */}\n            <div className=\"leftProjectContainer\">\n              <img\n                src={MomentsLogo}\n                className=\"projectLogo\"\n                alt=\"MomentsLogo\"\n              />\n              <div className=\"leftProjectDescCont\">\n                <h1 className=\"projectTitleText\">Moments</h1>\n                <h2 className=\"projectBodyText\">\n                  Moments is cross-platform social media app designed to be user\n                  focused and facilitate happiness and remind you of the good\n                  moments in your life. It's built using react native with expo\n                  for the front-end and firebase for data storage.\n                </h2>\n              </div>\n            </div>\n            {/* Next Up */}\n            <div className=\"rightProjectContainer\">\n              <div className=\"rightProjectDescCont\">\n                <h1 className=\"projectTitleText\">Next-Up</h1>\n                <h2 className=\"projectBodyText\">\n                  Next-Up is a spotify web queueing app built for the CMU\n                  computer science Hack-112 hackathon. It's built using a react\n                  front-end with a flask backend, connected via the axios\n                  toolkit.\n                </h2>\n              </div>\n              <img src={NextUpLogo} className=\"projectLogo\" alt=\"NextUpLogo\" />\n            </div>\n            {/* Calorimager */}\n            <div className=\"leftProjectContainer\">\n              <img\n                src={Calorimager}\n                className=\"projectLogo\"\n                alt=\"CalorimagerLogo\"\n              />\n              <div className=\"leftProjectDescCont\">\n                <h1 className=\"projectTitleText\">Calorimager</h1>\n                <h2 className=\"projectBodyText\">\n                  Calorimager is a computer-vision based calorie estimation\n                  software. Developed in python, it utilizes a tensor-flow\n                  deeplearning model for classifying fruits in combination with\n                  an OpenCV based volume estimation algorithm. It then estimates\n                  the number of calories in a piece food based on its size and\n                  type.\n                </h2>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Parallax>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}